/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.analizador_copias;

import com.mycompany.Analizadores.lexerJava;
import com.mycompany.Analizadores.parser;
import com.mycompany.Objetos.ErrorFinded;
import com.mycompany.Objetos.Imports;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author karlamatias
 */
public class Servidor extends javax.swing.JFrame implements Runnable {

    private lexerJava lexer;
    private parser parser;
    NumeroLinea num;
    private ArrayList<ErrorFinded> reporteErrores = new ArrayList<ErrorFinded>();

    public Servidor() {
        initComponents();
        num = new NumeroLinea(txtArea);
        jScrollPane1.setRowHeaderView(num);
        setLocationRelativeTo(null);

        Thread hilo = new Thread(this);
        hilo.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAnalizar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        jLabel2.setText("Consola de Errores");

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 554, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAnalizar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAnalizar)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        Reader reader = new StringReader(txtArea.getText());
        ArrayList<String> errores = new ArrayList<String>();
        lexer = new lexerJava(reader);
        parser = new parser(lexer);

        try {
            parser.parse();
            //Errores
            errores = parser.getErrorsList();
            reporteErrores = new ArrayList<ErrorFinded>();
            reporteErrores.addAll(parser.getReporteErrorsList());
            // reporteErrores.addAll(lexer.getReporteErrorsList());

            for (String erroresEncontrados : errores) {
                txtArea.setText(txtArea.getText() + erroresEncontrados);
            }

        } catch (Exception ex) {
            errores = parser.getErrorsList();
            for (String erroresEncontrados : errores) {
                txtArea.setText(txtArea.getText() + erroresEncontrados + "\n");
            }
    }//GEN-LAST:event_btnAnalizarActionPerformed
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        new Servidor().setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables

    public void run() {
        ArrayList<String> errores = new ArrayList<String>();
        ArrayList<Imports> imports = new ArrayList<Imports>();
        try {
            ServerSocket servidor = new ServerSocket(9999);

            while (true) {
                //acepta todo lo que viene del puerto seleccionado 
                Socket socket = servidor.accept();

                //flujo de entrada de datos 
                DataInputStream flujo_entrada = new DataInputStream(socket.getInputStream());
                //leer lo que viene del cliente
                String text = flujo_entrada.readUTF();

                Reader reader = new StringReader(text);
                lexer = new lexerJava(reader);
                parser = new parser(lexer);

                try {
                    parser.parse();
                    //Errores
                    errores = parser.getErrorsList();

                    if (lexerJava.ErroresLexicos.isEmpty() && parser.ErroresSintacticos.isEmpty()) {
                        txtArea.setText(txtArea.getText() + "Compilado Con exito" + "\n");
                        JOptionPane.showMessageDialog(null, "COMPILADO CON EXITO", "ARCHIVO CONFIGURACION", JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        for (String erroresEncontrados : errores) {
                            txtArea.setText(txtArea.getText() + erroresEncontrados);
                        }
                    }
                    /* for (String erroresEncontrados : errores) {
                        txtArea.setText("\n" + txtArea.getText() + erroresEncontrados + "\n");
                    }*/

                    //socket.close();
                } catch (Exception ex) {
                    errores = parser.getErrorsList();
                    for (String erroresEncontrados : errores) {
                        txtArea.setText("\n" + txtArea.getText() + erroresEncontrados + "\n");
                    }

                }
                socket.close();
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
}
