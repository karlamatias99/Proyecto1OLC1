
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.Analizadores.Html;

import com.mycompany.Analizadores.Html.lexerHTML;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.mycompany.Objetos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\002" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\005\000\002" +
    "\006\004\000\002\007\006\000\002\007\004\000\002\007" +
    "\012\000\002\011\003\000\002\011\003\000\002\004\005" +
    "\000\002\004\004\000\002\010\004\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\016\005\000\002" +
    "\013\006\000\002\013\005\000\002\013\004\000\002\013" +
    "\005\000\002\014\006\000\002\014\005\000\002\014\003" +
    "\000\002\015\005\000\002\015\006\000\002\015\005\000" +
    "\002\015\006\000\002\015\003\000\002\017\016\000\002" +
    "\017\007\000\002\017\003\000\002\012\014\000\002\012" +
    "\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\016\002\ufffc\003\013\005\007\006\004\011" +
    "\005\051\015\001\002\000\004\051\ufff7\001\002\000\010" +
    "\012\052\013\050\015\053\001\002\000\004\051\040\001" +
    "\002\000\004\051\ufff8\001\002\000\004\002\uffff\001\002" +
    "\000\014\002\ufff9\005\ufff9\006\ufff9\011\ufff9\051\ufff9\001" +
    "\002\000\004\002\037\001\002\000\002\001\002\000\014" +
    "\002\ufffe\005\007\006\004\011\005\051\015\001\002\000" +
    "\006\035\016\045\017\001\002\000\006\051\021\052\020" +
    "\001\002\000\014\002\ufff3\005\ufff3\006\ufff3\011\ufff3\051" +
    "\ufff3\001\002\000\004\045\ufff1\001\002\000\004\045\ufff0" +
    "\001\002\000\004\045\023\001\002\000\014\002\ufff4\005" +
    "\ufff4\006\ufff4\011\ufff4\051\ufff4\001\002\000\004\051\027" +
    "\001\002\000\004\002\000\001\002\000\014\002\ufffa\005" +
    "\ufffa\006\ufffa\011\ufffa\051\ufffa\001\002\000\004\035\030" +
    "\001\002\000\004\051\031\001\002\000\004\036\032\001" +
    "\002\000\004\033\033\001\002\000\004\047\034\001\002" +
    "\000\004\034\035\001\002\000\014\002\ufff2\005\ufff2\006" +
    "\ufff2\011\ufff2\051\ufff2\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\001\001\002\000\010\035\030\045\043\046" +
    "\042\001\002\000\014\002\ufffb\005\ufffb\006\ufffb\011\ufffb" +
    "\051\ufffb\001\002\000\004\051\044\001\002\000\014\002" +
    "\ufff5\005\ufff5\006\ufff5\011\ufff5\051\ufff5\001\002\000\006" +
    "\045\043\046\042\001\002\000\014\002\ufff6\005\ufff6\006" +
    "\ufff6\011\ufff6\051\ufff6\001\002\000\010\012\uffec\013\uffec" +
    "\015\uffec\001\002\000\010\012\uffea\013\uffea\015\uffea\001" +
    "\002\000\006\032\074\051\072\001\002\000\010\012\137" +
    "\013\050\015\053\001\002\000\004\002\uffee\001\002\000" +
    "\012\016\054\017\055\023\056\031\061\001\002\000\010" +
    "\012\uffe6\013\uffe6\015\uffe6\001\002\000\004\020\122\001" +
    "\002\000\010\025\067\027\070\031\071\001\002\000\004" +
    "\016\065\001\002\000\006\016\062\017\055\001\002\000" +
    "\010\016\uffe2\017\uffe2\022\uffe2\001\002\000\010\012\uffe7" +
    "\013\uffe7\015\uffe7\001\002\000\004\016\064\001\002\000" +
    "\010\012\uffe8\013\uffe8\015\uffe8\001\002\000\010\012\uffe5" +
    "\013\uffe5\015\uffe5\001\002\000\004\024\120\001\002\000" +
    "\006\032\074\051\072\001\002\000\006\032\074\051\072" +
    "\001\002\000\004\024\uffdd\001\002\000\010\014\uffda\026" +
    "\uffda\030\uffda\001\002\000\004\030\113\001\002\000\004" +
    "\037\075\001\002\000\006\033\076\051\077\001\002\000" +
    "\004\047\102\001\002\000\004\040\100\001\002\000\004" +
    "\032\101\001\002\000\010\014\uffdb\026\uffdb\030\uffdb\001" +
    "\002\000\004\051\103\001\002\000\004\043\104\001\002" +
    "\000\004\051\105\001\002\000\004\044\106\001\002\000" +
    "\004\047\107\001\002\000\004\051\110\001\002\000\004" +
    "\040\111\001\002\000\004\032\112\001\002\000\010\014" +
    "\uffdc\026\uffdc\030\uffdc\001\002\000\012\024\uffdf\025\067" +
    "\027\070\031\071\001\002\000\004\024\uffde\001\002\000" +
    "\004\026\116\001\002\000\012\024\uffe1\025\067\027\070" +
    "\031\071\001\002\000\004\024\uffe0\001\002\000\014\016" +
    "\uffe3\017\uffe3\022\uffe3\023\056\031\061\001\002\000\010" +
    "\016\uffe4\017\uffe4\022\uffe4\001\002\000\004\050\123\001" +
    "\002\000\004\051\124\001\002\000\004\021\125\001\002" +
    "\000\004\050\126\001\002\000\004\051\127\001\002\000" +
    "\004\045\130\001\002\000\004\010\131\001\002\000\010" +
    "\022\132\023\056\031\061\001\002\000\004\016\uffd9\001" +
    "\002\000\004\022\134\001\002\000\004\016\uffd8\001\002" +
    "\000\010\012\uffed\013\uffed\015\uffed\001\002\000\010\012" +
    "\uffeb\013\uffeb\015\uffeb\001\002\000\004\002\uffef\001\002" +
    "\000\004\014\141\001\002\000\010\012\uffe9\013\uffe9\015" +
    "\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\014\002\011\003\013\004\007\005\005\007" +
    "\010\001\001\000\002\001\001\000\010\010\050\013\046" +
    "\016\045\001\001\000\004\006\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\035\001\001\000\010\004\024\005\023\007" +
    "\025\001\001\000\002\001\001\000\004\011\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\137\001\001\000\006\013\135\016\134\001\001\000" +
    "\002\001\001\000\006\012\056\014\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\065\001\001\000" +
    "\002\001\001\000\004\012\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\114\001\001" +
    "\000\004\017\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\116\001\001\000\002\001\001\000\004" +
    "\014\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





//Listas
    private ArrayList<String> errorsList=new ArrayList<String>();
    private ArrayList<ErrorFinded> reporteErrorList= new ArrayList<ErrorFinded>();
public static ArrayList<String> ErroresSintacticos=new ArrayList<String>();

public parserHTML(lexerHTML lexer) {
        super(lexer);
    }

private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserHTML$actions {
  private final parserHTML parser;

  /** Constructor */
  CUP$parserHTML$actions(parserHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserHTML$do_action_part00000000(
    int                        CUP$parserHTML$act_num,
    java_cup.runtime.lr_parser CUP$parserHTML$parser,
    java.util.Stack            CUP$parserHTML$stack,
    int                        CUP$parserHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserHTML$result;

      /* select the action based on the action number */
      switch (CUP$parserHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).value;
		RESULT = start_val;
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserHTML$parser.done_parsing();
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= Declaracion EtHTML 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= EtHTML 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio ::= Declaracion 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inicio ::= error s 
            {
              Object RESULT =null;
		System.out.println("Error en expresion");
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inicio ::= 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= tipoDato declaracion 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Declaracion",1, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= Declaracion asignacion 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Declaracion",1, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion ::= asignacion 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Declaracion",1, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoDato ::= T_DATO 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoDato ::= CADENA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= IDENTIFICADOR COMA declaracion 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= IDENTIFICADOR P_COMA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignacion ::= IDENTIFICADOR IGUAL dato P_COMA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= IDENTIFICADOR P_COMA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= tipoDato IDENTIFICADOR IGUAL IDENTIFICADOR Op_MATEMATICO RESULTADO PUNTO SCORE 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dato ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dato ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EtHTML ::= INHTML Sentencia FINHTML 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("EtHTML",2, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EtHTML ::= INHTML FINHTML 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("EtHTML",2, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= Sentencia etiqueta 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= etiqueta 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencia ::= Sentencia tablas 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sentencia ::= tablas 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiqueta ::= ETIQUETA1 valor FINETIQUETA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("etiqueta",12, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tablas ::= INTABLA fila SentenciaFor FINTABLA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("tablas",9, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tablas ::= INTABLA fila FINTABLA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("tablas",9, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tablas ::= INTABLA FINTABLA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("tablas",9, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tablas ::= INTABLA SentenciaFor FINTABLA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("tablas",9, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fila ::= INIFILCOLUM columna FINFILCOLUM fila 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("fila",10, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fila ::= INIFILCOLUM columna FINFILCOLUM 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("fila",10, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fila ::= SALTOLINEA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("fila",10, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // columna ::= INCOLUMT valor FINCOLUMT 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("columna",11, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // columna ::= INCOLUMT valor FINCOLUMT columna 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("columna",11, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // columna ::= INCOLUMD valor FINCOLUMD 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("columna",11, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // columna ::= INCOLUMD valor FINCOLUMD columna 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("columna",11, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // columna ::= SALTOLINEA 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("columna",11, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= DOBLEDOLAR PARENTESIS_A RESULTADO PUNTO IDENTIFICADOR CORCHETE_A IDENTIFICADOR CORCHETE_C PUNTO IDENTIFICADOR PARENTESIS_C DOBLEDOLAR 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-11)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= DOBLEDOLAR PARENTESIS_A IDENTIFICADOR PARENTESIS_C DOBLEDOLAR 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-4)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SentenciaFor ::= FOR ITERADOR D_PUNTOS IDENTIFICADOR HASTA D_PUNTOS IDENTIFICADOR P_COMA MAYORQ FINFOR 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("SentenciaFor",8, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-9)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SentenciaFor ::= FOR ITERADOR D_PUNTOS IDENTIFICADOR HASTA D_PUNTOS IDENTIFICADOR P_COMA MAYORQ fila FINFOR 
            {
              Object RESULT =null;

              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("SentenciaFor",8, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-10)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserHTML$do_action(
    int                        CUP$parserHTML$act_num,
    java_cup.runtime.lr_parser CUP$parserHTML$parser,
    java.util.Stack            CUP$parserHTML$stack,
    int                        CUP$parserHTML$top)
    throws java.lang.Exception
    {
              return CUP$parserHTML$do_action_part00000000(
                               CUP$parserHTML$act_num,
                               CUP$parserHTML$parser,
                               CUP$parserHTML$stack,
                               CUP$parserHTML$top);
    }
}

}
