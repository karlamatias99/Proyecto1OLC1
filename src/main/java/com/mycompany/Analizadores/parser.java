
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.Analizadores;

import com.mycompany.Analizadores.lexerJava;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.mycompany.Objetos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\002" +
    "\000\002\017\020\000\002\017\011\000\002\020\010\000" +
    "\002\020\007\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\021\013\000\002\021\012\000\002\021" +
    "\013\000\002\021\011\000\002\021\012\000\002\021\012" +
    "\000\002\021\011\000\002\004\006\000\002\004\010\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\011\000\002\004\012\000\002\004\005\000\002\004" +
    "\004\000\002\004\005\000\002\004\005\000\002\004\012" +
    "\000\002\004\012\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\004\010\000\002\006\011\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\007\000\002\013\006\000\002\013\007" +
    "\000\002\007\015\000\002\010\011\000\002\010\010\000" +
    "\002\011\013\000\002\012\011\000\002\012\010\000\002" +
    "\014\012\000\002\014\006\000\002\014\011\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\015\011" +
    "\000\002\016\006\000\002\016\007\000\002\022\006\000" +
    "\002\022\007\000\002\023\007\000\002\023\006\000\002" +
    "\023\007\000\002\023\010\000\002\023\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\020\002\ufffc\003\011\015\015\020\012\021" +
    "\004\022\005\023\014\001\002\000\010\005\uffb0\007\uffb0" +
    "\026\uffb0\001\002\000\010\005\uffaf\007\uffaf\026\uffaf\001" +
    "\002\000\004\002\uffff\001\002\000\004\026\036\001\002" +
    "\000\004\002\035\001\002\000\002\001\002\000\010\005" +
    "\uffb1\007\uffb1\026\uffb1\001\002\000\014\002\ufffe\020\012" +
    "\021\004\022\005\023\014\001\002\000\010\005\uffae\007" +
    "\uffae\026\uffae\001\002\000\004\016\016\001\002\000\004" +
    "\050\017\001\002\000\004\017\020\001\002\000\004\050" +
    "\021\001\002\000\004\032\022\001\002\000\004\047\023" +
    "\001\002\000\016\002\ufffa\015\024\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\001\002\000\004\016\025\001\002\000\004" +
    "\050\026\001\002\000\004\052\027\001\002\000\004\050" +
    "\030\001\002\000\004\052\031\001\002\000\004\047\032" +
    "\001\002\000\014\002\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\001\002\000\004\002\000\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\001\001\002\000\004\052\037\001" +
    "\002\000\004\043\040\001\002\000\042\005\064\006\045" +
    "\007\042\010\047\012\051\013\044\014\066\020\012\021" +
    "\004\022\005\023\014\024\046\040\067\044\061\052\062" +
    "\054\043\001\002\000\042\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\012\uffec\013\uffec\014\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\040\uffec\044\uffec\052\uffec\054\uffec\001" +
    "\002\000\004\052\364\001\002\000\004\050\357\001\002" +
    "\000\004\041\350\001\002\000\004\052\340\001\002\000" +
    "\004\041\325\001\002\000\004\041\313\001\002\000\042" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\040\ufff2" +
    "\044\ufff2\052\ufff2\054\ufff2\001\002\000\004\043\303\001" +
    "\002\000\044\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\040\uffd1\042\uffd1\044\uffd1\052\uffd1\054\uffd1\001\002" +
    "\000\006\005\227\007\230\001\002\000\042\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\040\uffe8\044\uffe8\052" +
    "\uffe8\054\uffe8\001\002\000\042\005\064\006\045\007\042" +
    "\010\047\012\051\013\044\014\066\020\012\021\004\022" +
    "\005\023\014\024\046\040\067\044\226\052\062\054\043" +
    "\001\002\000\042\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\040\ufff4\044\ufff4\052\ufff4\054\ufff4\001\002\000" +
    "\042\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\040" +
    "\ufff6\044\ufff6\052\ufff6\054\ufff6\001\002\000\042\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\040\uffee\044\uffee" +
    "\052\uffee\054\uffee\001\002\000\004\002\ufff8\001\002\000" +
    "\016\030\uffaa\036\167\037\157\041\171\052\164\053\156" +
    "\001\002\000\042\005\uffea\006\uffea\007\uffea\010\uffea\012" +
    "\uffea\013\uffea\014\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\040\uffea\044\uffea\052\uffea\054\uffea\001\002\000" +
    "\012\037\157\047\uffaa\052\161\053\156\001\002\000\042" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\040\ufff0" +
    "\044\ufff0\052\ufff0\054\ufff0\001\002\000\004\041\072\001" +
    "\002\000\004\052\070\001\002\000\004\047\071\001\002" +
    "\000\044\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\040\uffd3\042\uffd3\044\uffd3\052\uffd3\054\uffd3\001\002\000" +
    "\010\005\073\007\076\052\074\001\002\000\004\052\147" +
    "\001\002\000\004\030\117\001\002\000\004\042\102\001" +
    "\002\000\004\052\077\001\002\000\004\051\100\001\002" +
    "\000\004\052\101\001\002\000\004\042\uffc0\001\002\000" +
    "\004\043\103\001\002\000\042\005\064\006\045\007\042" +
    "\010\047\012\051\013\044\014\066\020\012\021\004\022" +
    "\005\023\014\024\046\040\067\044\105\052\062\054\043" +
    "\001\002\000\042\005\064\006\045\007\042\010\047\012" +
    "\051\013\044\014\066\020\012\021\004\022\005\023\014" +
    "\024\046\040\067\044\115\052\062\054\043\001\002\000" +
    "\042\005\uffc2\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\040" +
    "\uffc2\044\uffc2\052\uffc2\054\uffc2\001\002\000\042\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\040\uffed\044\uffed" +
    "\052\uffed\054\uffed\001\002\000\042\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\040\ufff3\044\ufff3\052\ufff3\054" +
    "\ufff3\001\002\000\042\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\040\uffe9\044\uffe9\052\uffe9\054\uffe9\001\002" +
    "\000\042\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\040\ufff5\044\ufff5\052\ufff5\054\ufff5\001\002\000\042\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\040\ufff7\044" +
    "\ufff7\052\ufff7\054\ufff7\001\002\000\042\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\040\uffef\044\uffef\052\uffef" +
    "\054\uffef\001\002\000\042\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\040\uffeb\044\uffeb\052\uffeb\054\uffeb\001" +
    "\002\000\042\005\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\040\uffc3\044\uffc3\052\uffc3\054\uffc3\001\002\000\042" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\040\ufff1" +
    "\044\ufff1\052\ufff1\054\ufff1\001\002\000\004\053\120\001" +
    "\002\000\004\047\121\001\002\000\006\037\123\052\124" +
    "\001\002\000\004\047\137\001\002\000\006\042\uffce\047" +
    "\uffce\001\002\000\004\034\125\001\002\000\012\004\131" +
    "\037\127\052\130\053\126\001\002\000\006\042\uffcc\047" +
    "\uffcc\001\002\000\006\042\uffcd\047\uffcd\001\002\000\010" +
    "\033\135\042\uffcb\047\uffcb\001\002\000\006\004\133\052" +
    "\132\001\002\000\004\004\134\001\002\000\006\042\uffc9" +
    "\047\uffc9\001\002\000\006\042\uffc8\047\uffc8\001\002\000" +
    "\006\037\123\052\124\001\002\000\006\042\uffca\047\uffca" +
    "\001\002\000\006\036\140\052\142\001\002\000\004\052" +
    "\146\001\002\000\004\042\uffbf\001\002\000\006\035\144" +
    "\036\143\001\002\000\004\042\uffbd\001\002\000\004\053" +
    "\145\001\002\000\004\042\uffbe\001\002\000\004\042\uffbc" +
    "\001\002\000\004\030\150\001\002\000\004\053\151\001" +
    "\002\000\004\047\152\001\002\000\006\037\123\052\124" +
    "\001\002\000\004\047\154\001\002\000\006\036\140\052" +
    "\142\001\002\000\004\042\uffc1\001\002\000\010\004\uffad" +
    "\030\uffad\047\uffad\001\002\000\010\004\uffab\030\uffab\047" +
    "\uffab\001\002\000\004\047\166\001\002\000\006\030\162" +
    "\047\uffac\001\002\000\012\037\157\047\uffaa\052\164\053" +
    "\156\001\002\000\004\047\165\001\002\000\010\004\uffac" +
    "\030\uffac\047\uffac\001\002\000\044\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\040\uffdd\042\uffdd\044\uffdd\052" +
    "\uffdd\054\uffdd\001\002\000\044\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\012\uffd7\013\uffd7\014\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\040\uffd7\042\uffd7\044\uffd7\052\uffd7" +
    "\054\uffd7\001\002\000\004\047\225\001\002\000\004\030" +
    "\217\001\002\000\010\004\175\041\173\042\172\001\002" +
    "\000\004\047\216\001\002\000\010\004\175\041\173\053" +
    "\207\001\002\000\004\042\205\001\002\000\012\004\uffaa" +
    "\037\157\052\164\053\156\001\002\000\004\004\177\001" +
    "\002\000\012\004\175\031\201\032\200\041\173\001\002" +
    "\000\006\004\175\041\173\001\002\000\006\004\175\041" +
    "\173\001\002\000\004\042\uffb5\001\002\000\004\042\uffb6" +
    "\001\002\000\004\042\uffb4\001\002\000\004\047\206\001" +
    "\002\000\042\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\040\uffb7\044\uffb7\052\uffb7\054\uffb7\001\002\000\004" +
    "\031\212\001\002\000\004\042\211\001\002\000\004\042" +
    "\uffb2\001\002\000\004\053\213\001\002\000\004\042\214" +
    "\001\002\000\006\004\175\041\173\001\002\000\004\042" +
    "\uffb3\001\002\000\042\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\040\uffb8\044\uffb8\052\uffb8\054\uffb8\001\002" +
    "\000\004\027\220\001\002\000\004\052\221\001\002\000" +
    "\004\041\222\001\002\000\004\042\223\001\002\000\004" +
    "\047\224\001\002\000\044\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\040\uffd4\042\uffd4\044\uffd4\052\uffd4\054" +
    "\uffd4\001\002\000\044\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\040\uffd2\042\uffd2\044\uffd2\052\uffd2\054\uffd2" +
    "\001\002\000\004\002\ufff9\001\002\000\014\030\257\037" +
    "\157\047\uffaa\052\260\053\156\001\002\000\004\052\231" +
    "\001\002\000\010\030\232\041\233\047\234\001\002\000" +
    "\004\004\250\001\002\000\030\005\064\006\045\007\042" +
    "\020\012\021\004\022\005\023\014\040\067\042\235\052" +
    "\237\054\043\001\002\000\044\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\012\uffdc\013\uffdc\014\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\040\uffdc\042\uffdc\044\uffdc\052\uffdc" +
    "\054\uffdc\001\002\000\004\043\244\001\002\000\004\042" +
    "\240\001\002\000\014\030\uffaa\036\167\037\157\052\164" +
    "\053\156\001\002\000\004\043\241\001\002\000\040\005" +
    "\064\006\045\007\042\010\047\012\051\013\044\014\066" +
    "\020\012\021\004\022\005\023\014\024\046\040\067\052" +
    "\062\054\043\001\002\000\042\005\064\006\045\007\042" +
    "\010\047\012\051\013\044\014\066\020\012\021\004\022" +
    "\005\023\014\024\046\040\067\044\243\052\062\054\043" +
    "\001\002\000\044\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\040\uffe7\042\uffe7\044\uffe7\052\uffe7\054\uffe7\001" +
    "\002\000\042\005\064\006\045\007\042\010\047\012\051" +
    "\013\044\014\066\020\012\021\004\022\005\023\014\024" +
    "\046\040\067\044\246\052\062\054\043\001\002\000\042" +
    "\005\064\006\045\007\042\010\047\012\051\013\044\014" +
    "\066\020\012\021\004\022\005\023\014\024\046\040\067" +
    "\044\247\052\062\054\043\001\002\000\044\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\040\uffe1\042\uffe1\044" +
    "\uffe1\052\uffe1\054\uffe1\001\002\000\044\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\040\uffe2\042\uffe2\044\uffe2" +
    "\052\uffe2\054\uffe2\001\002\000\006\004\252\052\251\001" +
    "\002\000\004\004\254\001\002\000\004\047\253\001\002" +
    "\000\044\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\040\uffdb\042\uffdb\044\uffdb\052\uffdb\054\uffdb\001\002\000" +
    "\004\047\255\001\002\000\044\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\012\uffda\013\uffda\014\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\040\uffda\042\uffda\044\uffda\052\uffda" +
    "\054\uffda\001\002\000\004\047\302\001\002\000\012\037" +
    "\157\047\uffaa\052\164\053\156\001\002\000\010\030\261" +
    "\041\262\047\uffac\001\002\000\012\037\157\047\uffaa\052" +
    "\164\053\156\001\002\000\030\005\064\006\045\007\042" +
    "\020\012\021\004\022\005\023\014\040\067\042\263\052" +
    "\237\054\043\001\002\000\004\043\272\001\002\000\004" +
    "\042\265\001\002\000\004\043\266\001\002\000\042\005" +
    "\064\006\045\007\042\010\047\012\051\013\044\014\066" +
    "\020\012\021\004\022\005\023\014\024\046\040\067\044" +
    "\270\052\062\054\043\001\002\000\042\005\064\006\045" +
    "\007\042\010\047\012\051\013\044\014\066\020\012\021" +
    "\004\022\005\023\014\024\046\040\067\044\271\052\062" +
    "\054\043\001\002\000\044\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\040\uffe3\042\uffe3\044\uffe3\052\uffe3\054" +
    "\uffe3\001\002\000\044\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\040\uffe5\042\uffe5\044\uffe5\052\uffe5\054\uffe5" +
    "\001\002\000\042\005\064\006\045\007\042\010\047\012" +
    "\051\013\044\014\066\020\012\021\004\022\005\023\014" +
    "\024\046\040\067\044\274\052\062\054\043\001\002\000" +
    "\042\005\064\006\045\007\042\010\047\012\051\013\044" +
    "\014\066\020\012\021\004\022\005\023\014\024\046\040" +
    "\067\044\275\052\062\054\043\001\002\000\044\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\040\uffe4\042\uffe4" +
    "\044\uffe4\052\uffe4\054\uffe4\001\002\000\044\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\040\uffe6\042\uffe6\044" +
    "\uffe6\052\uffe6\054\uffe6\001\002\000\004\047\277\001\002" +
    "\000\044\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\040\uffdf\042\uffdf\044\uffdf\052\uffdf\054\uffdf\001\002\000" +
    "\004\047\301\001\002\000\044\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\012\uffde\013\uffde\014\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\040\uffde\042\uffde\044\uffde\052\uffde" +
    "\054\uffde\001\002\000\044\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\040\uffe0\042\uffe0\044\uffe0\052\uffe0\054" +
    "\uffe0\001\002\000\040\005\064\006\045\007\042\010\047" +
    "\012\051\013\044\014\066\020\012\021\004\022\005\023" +
    "\014\024\046\040\067\052\062\054\043\001\002\000\042" +
    "\005\064\006\045\007\042\010\047\012\051\013\044\014" +
    "\066\020\012\021\004\022\005\023\014\024\046\040\067" +
    "\044\305\052\062\054\043\001\002\000\004\013\306\001" +
    "\002\000\004\041\307\001\002\000\006\037\123\052\124" +
    "\001\002\000\004\042\311\001\002\000\004\047\312\001" +
    "\002\000\042\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\040\uffc4\044\uffc4\052\uffc4\054\uffc4\001\002\000\006" +
    "\037\123\052\124\001\002\000\004\042\315\001\002\000" +
    "\004\043\316\001\002\000\040\005\064\006\045\007\042" +
    "\010\047\012\051\013\044\014\066\020\012\021\004\022" +
    "\005\023\014\024\046\040\067\052\062\054\043\001\002" +
    "\000\042\005\064\006\045\007\042\010\047\012\051\013" +
    "\044\014\066\020\012\021\004\022\005\023\014\024\046" +
    "\040\067\044\320\052\062\054\043\001\002\000\044\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\321\012\uffcf\013\uffcf" +
    "\014\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\040" +
    "\uffcf\044\uffcf\052\uffcf\054\uffcf\001\002\000\004\043\322" +
    "\001\002\000\040\005\064\006\045\007\042\010\047\012" +
    "\051\013\044\014\066\020\012\021\004\022\005\023\014" +
    "\024\046\040\067\052\062\054\043\001\002\000\042\005" +
    "\064\006\045\007\042\010\047\012\051\013\044\014\066" +
    "\020\012\021\004\022\005\023\014\024\046\040\067\044" +
    "\324\052\062\054\043\001\002\000\042\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\040\uffc7\044\uffc7\052\uffc7" +
    "\054\uffc7\001\002\000\004\052\326\001\002\000\004\042" +
    "\327\001\002\000\004\043\330\001\002\000\004\025\332" +
    "\001\002\000\004\044\337\001\002\000\004\052\333\001" +
    "\002\000\004\051\334\001\002\000\004\040\335\001\002" +
    "\000\006\025\332\044\uffba\001\002\000\004\044\uffb9\001" +
    "\002\000\042\005\uffbb\006\uffbb\007\uffbb\010\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\040\uffbb\044\uffbb\052\uffbb\054\uffbb\001\002\000\006" +
    "\030\341\047\342\001\002\000\004\027\343\001\002\000" +
    "\044\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\040" +
    "\uffd6\042\uffd6\044\uffd6\052\uffd6\054\uffd6\001\002\000\004" +
    "\006\344\001\002\000\004\041\345\001\002\000\004\042" +
    "\346\001\002\000\004\047\347\001\002\000\044\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\040\uffd5\042\uffd5" +
    "\044\uffd5\052\uffd5\054\uffd5\001\002\000\006\037\123\052" +
    "\124\001\002\000\004\042\352\001\002\000\004\043\353" +
    "\001\002\000\042\005\064\006\045\007\042\010\047\012" +
    "\051\013\044\014\066\020\012\021\004\022\005\023\014" +
    "\024\046\040\067\044\355\052\062\054\043\001\002\000" +
    "\042\005\064\006\045\007\042\010\047\012\051\013\044" +
    "\014\066\020\012\021\004\022\005\023\014\024\046\040" +
    "\067\044\356\052\062\054\043\001\002\000\042\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\040\uffc5\044\uffc5" +
    "\052\uffc5\054\uffc5\001\002\000\042\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\040\uffc6\044\uffc6\052\uffc6\054" +
    "\uffc6\001\002\000\004\052\360\001\002\000\004\030\361" +
    "\001\002\000\004\052\362\001\002\000\004\047\363\001" +
    "\002\000\044\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\040\uffd0\042\uffd0\044\uffd0\052\uffd0\054\uffd0\001\002" +
    "\000\046\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\040\uffd8\042\uffd8\044\uffd8\047\365\052\uffd8\054\uffd8\001" +
    "\002\000\044\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\040\uffd9\042\uffd9\044\uffd9\052\uffd9\054\uffd9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\012\002\007\017\012\020\005\024\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\033\001" +
    "\001\000\002\001\001\000\006\020\032\024\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\054\004\056\006\055\007\047\010" +
    "\064\011\057\012\040\015\062\021\051\022\053\024\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\111\006\110\007\106\010\115\011\112\012\105\015" +
    "\113\021\051\022\107\024\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\167\001\001\000\002\001\001\000\004\025\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\103\004" +
    "\056\006\055\007\047\010\064\011\057\012\040\015\062" +
    "\021\051\022\053\024\052\001\001\000\026\004\111\006" +
    "\110\007\106\010\115\011\112\012\105\015\113\021\051" +
    "\022\107\024\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\135\001\001\000\002\001\001\000\004\005" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\152\001\001\000\002\001" +
    "\001\000\004\005\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\173\001\001\000\002" +
    "\001\001\000\004\023\207\001\001\000\002\001\001\000" +
    "\004\025\175\001\001\000\002\001\001\000\004\023\201" +
    "\001\001\000\004\023\203\001\001\000\004\023\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\235\021\051\024\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\167\001\001\000\002\001\001\000\030\003\241\004\056" +
    "\006\055\007\047\010\064\011\057\012\040\015\062\021" +
    "\051\022\053\024\052\001\001\000\026\004\111\006\110" +
    "\007\106\010\115\011\112\012\105\015\113\021\051\022" +
    "\107\024\052\001\001\000\002\001\001\000\030\003\244" +
    "\004\056\006\055\007\047\010\064\011\057\012\040\015" +
    "\062\021\051\022\053\024\052\001\001\000\026\004\111" +
    "\006\110\007\106\010\115\011\112\012\105\015\113\021" +
    "\051\022\107\024\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\277\001\001\000\002\001" +
    "\001\000\004\025\275\001\001\000\010\004\263\021\051" +
    "\024\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\266\004\056\006\055\007\047" +
    "\010\064\011\057\012\040\015\062\021\051\022\053\024" +
    "\052\001\001\000\026\004\111\006\110\007\106\010\115" +
    "\011\112\012\105\015\113\021\051\022\107\024\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\272" +
    "\004\056\006\055\007\047\010\064\011\057\012\040\015" +
    "\062\021\051\022\053\024\052\001\001\000\026\004\111" +
    "\006\110\007\106\010\115\011\112\012\105\015\113\021" +
    "\051\022\107\024\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\303" +
    "\004\056\006\055\007\047\010\064\011\057\012\040\015" +
    "\062\021\051\022\053\024\052\001\001\000\026\004\111" +
    "\006\110\007\106\010\115\011\112\012\105\015\113\021" +
    "\051\022\107\024\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\316\004" +
    "\056\006\055\007\047\010\064\011\057\012\040\015\062" +
    "\021\051\022\053\024\052\001\001\000\026\004\111\006" +
    "\110\007\106\010\115\011\112\012\105\015\113\021\051" +
    "\022\107\024\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\322\004\056\006\055\007\047\010\064" +
    "\011\057\012\040\015\062\021\051\022\053\024\052\001" +
    "\001\000\026\004\111\006\110\007\106\010\115\011\112" +
    "\012\105\015\113\021\051\022\107\024\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\353\004\056\006" +
    "\055\007\047\010\064\011\057\012\040\015\062\021\051" +
    "\022\053\024\052\001\001\000\026\004\111\006\110\007" +
    "\106\010\115\011\112\012\105\015\113\021\051\022\107" +
    "\024\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





//Listas
    private ArrayList<String> errorsList=new ArrayList<String>();
    private ArrayList<Clases> clasesList= new ArrayList<Clases>();
public static ArrayList<String> ErroresSintacticos=new ArrayList<String>();
    private ArrayList<ErrorFinded> reporteErrorList= new ArrayList<ErrorFinded>();
    private ArrayList<DeclaracionVariables> variablesList = new ArrayList<DeclaracionVariables>();
    private ArrayList<Imports> importsList = new ArrayList<Imports>();
    private ArrayList<Metodos> metodosList = new ArrayList<Metodos>();
    private ArrayList<SentenciaDoWhile> DoWhileList = new ArrayList<SentenciaDoWhile>();
    private ArrayList<SentenciaFor> ForList = new ArrayList<SentenciaFor>();
    private ArrayList<SentenciaIf> IfList = new ArrayList<SentenciaIf>();
    private ArrayList<SentenciaIfElse> IfElseList = new ArrayList<SentenciaIfElse>();
    private ArrayList<SentenciaSwitch> SwitchList = new ArrayList<SentenciaSwitch>();
    private ArrayList<SentenciaWhile> WhileList = new ArrayList<SentenciaWhile>();

public parser(lexerJava lexer) {
        super(lexer);
    }

public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");

//Reporte sintactico
    Integer linea = (Integer) s.left;
    Integer columna = (Integer) s.right;
    String componente = (String) s.value;
   errorsList.add(String.format("Error Sintactico con el Token: '%s' este no pertenece a la estructura- En la linea: %d y columna: %d",s.value, s.left, s.right));
      reporteErrorList.add(new ErrorFinded(componente, linea, columna,"Sintactico","Error sintactico, se esperaba "));
System.out.println(reporteErrorList);
    }

 @Override
    public List<Integer> expected_token_ids() {
        return super.expected_token_ids();
    }

 //Retorna list de errores sintacticos
        public ArrayList getReporteErrorsList(){
	        return reporteErrorList;
	    }
        //Retorna list de errores sintacticos del reporte
        public ArrayList getErrorsList(){
	        return errorsList;
	    }


//Retorna list de variables
        public ArrayList getFVariablesList(){ 
	        return variablesList;
	    }
        //Ingresa datos en array de variables
        public void addVariablesList(DeclaracionVariables variables){
            try {
                 variablesList.add(variables);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

//Retorna list de clases
        public ArrayList getClasesList(){ 
	        return clasesList;
	    }
        //Ingresa datos en array de clases
        public void addClasesList(Clases clases){
            try {
                 clasesList.add(clases);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

//Retorna list de  imports
        public ArrayList getImportsList(){ 
	        return importsList;
	    }
        //Ingresa datos en array de imports
        public void addImportsList(Imports i){
            try {
                 importsList.add(i);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

//Retorna list de  metodos
        public ArrayList getMetodosList(){ 
	        return metodosList;
	    }
        //Ingresa datos en array de metodos
        public void addMetodosList(Metodos m){
            try {
                 metodosList.add(m);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

//Retorna list de  doWhile
        public ArrayList getDoWhileList(){ 
	        return DoWhileList;
	    }
        //Ingresa datos en array de doWhile
        public void addDoWhileList(SentenciaDoWhile dW){
            try {
                 DoWhileList.add(dW);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

//Retorna list de  for
        public ArrayList getForList(){ 
	        return ForList;
	    }
        //Ingresa datos en array de doWhile
        public void addForList(SentenciaFor f){
            try {
                 ForList.add(f);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

//Retorna list de  if
        public ArrayList getIfList(){ 
	        return IfList;
	    }
        //Ingresa datos en array de if
        public void addIfList(SentenciaIf If){
            try {
                 IfList.add(If);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

//Retorna list de  ifelse
        public ArrayList getIfElseList(){ 
	        return IfList;
	    }
        //Ingresa datos en array de if
        public void addIfElseList(SentenciaIfElse IE){
            try {
                IfElseList.add(IE);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

//Retorna list de  switch
        public ArrayList getSwitchList(){ 
	        return SwitchList;
	    }
        //Ingresa datos en array de switch
        public void addSwitchList(SentenciaSwitch s){
            try {
                SwitchList.add(s);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }

//Retorna list de  while
        public ArrayList getWhileList(){ 
	        return WhileList;
	    }
        //Ingresa datos en array de while
        public void addWhileList(SentenciaWhile w){
            try {
                WhileList.add(w);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= Imports clases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= clases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio ::= Imports 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inicio ::= error s 
            {
              Object RESULT =null;
		System.out.println("Error en expresion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Imports ::= IMPORT JAVA PUNTO UTIL PUNTO MULTIPLICACION P_COMA IMPORT JAVA PUNTO IDENTIFICADOR PUNTO IDENTIFICADOR P_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object punto = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int punto2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int punto2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object punto2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int imleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object im = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int jaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int jaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ja = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int punto3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int punto3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object punto3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int punto4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int punto4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object punto4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Imports nuevoImport=new Imports(i.toString(),j.toString(),punto.toString(),u.toString(),punto2.toString(),m.toString(),pc.toString(),null);
   addImportsList(nuevoImport);

System.out.println("frase: " + nuevoImport.toString());
System.out.println("frase: " + im + ja + punto3 + id + punto4 + id2 + pc2 );

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Imports ::= IMPORT JAVA PUNTO UTIL PUNTO MULTIPLICACION P_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object punto = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int punto2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int punto2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object punto2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Imports nuevoImport=new Imports(i.toString(),j.toString(),punto.toString(),u.toString(),punto2.toString(),m.toString(),pc.toString(),null);
   addImportsList(nuevoImport);

System.out.println("frase: " + nuevoImport.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clases ::= Tipo_valor CLASS IDENTIFICADOR LLAVE_A Sentencia LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clases nuevaClases=new Clases(v.toString(), null, c.toString(), id.toString(), null,null,null, llA.toString(), sen.toString(), llC.toString());
   addClasesList(nuevaClases);
System.out.println("frase: " + nuevaClases.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clases",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clases ::= Tipo_valor CLASS IDENTIFICADOR LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clases nuevaClases=new Clases(v.toString(), null, c.toString(), id.toString(), null,null,null, llA.toString(), null, llC.toString());
   addClasesList(nuevaClases);
System.out.println("frase: " + v + v+ id + llA + llC );
System.out.println("frase: " + nuevaClases.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clases",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= Sentencia Declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= Declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= Sentencia If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= Sentencia If_Else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencia ::= If_Else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencia ::= Sentencia While 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= While 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= Sentencia Do_While 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= Do_While 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= Sentencia For 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= For 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencia ::= Sentencia Switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sentencia ::= Switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sentencia ::= Sentencia metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencia ::= metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // claseInterna ::= Tipo_valor CADENA IDENTIFICADOR PARENTESIS_A Declaracion PARENTESIS_C LLAVE_A Sentencia LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object parA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clases nuevaClases=new Clases(v.toString(), null, c.toString(), id.toString(), parA.toString(), de.toString(), parC.toString(), llA.toString(), sen.toString(), llC.toString());
   addClasesList(nuevaClases);
System.out.println("frase: " + nuevaClases.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("claseInterna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // claseInterna ::= Tipo_valor T_DATO IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVE_A Sentencia LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clases nuevaClases=new Clases(v.toString(), d.toString(), null, id.toString(), parA.toString(), null, parC.toString(), llA.toString(), sen.toString(), llC.toString());
   addClasesList(nuevaClases);
System.out.println("frase: " + nuevaClases.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("claseInterna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // claseInterna ::= Tipo_valor T_DATO IDENTIFICADOR PARENTESIS_A Declaracion PARENTESIS_C LLAVE_A Sentencia LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object parA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clases nuevaClases=new Clases(v.toString(), d.toString(), null, id.toString(), parA.toString(), de.toString(), parC.toString(), llA.toString(), sen.toString(), llC.toString());
   addClasesList(nuevaClases);
System.out.println("frase: " + nuevaClases.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("claseInterna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // claseInterna ::= Tipo_valor T_DATO IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object parC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clases nuevaClases=new Clases(v.toString(), d.toString(), null, id.toString(), parA.toString(), null, parC.toString(), llA.toString(), null, llC.toString());
   addClasesList(nuevaClases);
System.out.println("frase: " + nuevaClases.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("claseInterna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // claseInterna ::= Tipo_valor T_DATO IDENTIFICADOR PARENTESIS_A Declaracion PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object parC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clases nuevaClases=new Clases(v.toString(), d.toString(), null, id.toString(), parA.toString(), de.toString(), parC.toString(), llA.toString(), null, llC.toString());
   addClasesList(nuevaClases);
System.out.println("frase: " + nuevaClases.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("claseInterna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // claseInterna ::= Tipo_valor CADENA IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVE_A Sentencia LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clases nuevaClases=new Clases(v.toString(), s.toString(), null, id.toString(), parA.toString(), null, parC.toString(), llA.toString(), sen.toString(), llC.toString());
   addClasesList(nuevaClases);
System.out.println("frase: " + nuevaClases.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("claseInterna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // claseInterna ::= Tipo_valor CADENA IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object parC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clases nuevaClases=new Clases(v.toString(), s.toString(), null, id.toString(), parA.toString(), null, parC.toString(), llA.toString(), null, llC.toString());
   addClasesList(nuevaClases);
System.out.println("frase: " + nuevaClases.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("claseInterna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Declaracion ::= Tipo_valor T_DATO Datos P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Declaracion ::= Tipo_valor T_DATO IDENTIFICADOR IGUAL Datos P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Declaracion ::= Tipo_valor T_DATO IGUAL Datos P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Declaracion ::= T_DATO IDENTIFICADOR IGUAL Datos P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Declaracion ::= Tipo_valor CADENA IDENTIFICADOR P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Declaracion ::= Tipo_valor CADENA IDENTIFICADOR IGUAL COMILLAS COMILLAS P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Declaracion ::= Tipo_valor CADENA IDENTIFICADOR IGUAL COMILLAS IDENTIFICADOR COMILLAS P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Declaracion ::= CADENA IDENTIFICADOR P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Declaracion ::= CADENA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Declaracion ::= T_DATO Datos P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Declaracion ::= OBJETOS IDENTIFICADOR P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Declaracion ::= OBJETOS IDENTIFICADOR IGUAL NUEVO OBJETOS PARENTESIS_A PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Declaracion ::= IDENTIFICADOR Datos IGUAL NUEVO IDENTIFICADOR PARENTESIS_A PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Declaracion ::= Sn_SALIDA IDENTIFICADOR P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Declaracion ::= IDENTIFICADOR Op_INCREMENTO P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Declaracion ::= claseInterna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Declaracion ::= Sn_THIS PUNTO IDENTIFICADOR IGUAL IDENTIFICADOR P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // If ::= IF PARENTESIS_A Sentencia_Booleana PARENTESIS_C LLAVE_A Sentencia LLAVE_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object parA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIf nuevoIf = new SentenciaIf(i.toString(),parA.toString(), sen.toString(), parC.toString(), llA.toString(), s.toString(), llC.toString());
   addIfList(nuevoIf);
System.out.println("frase: " + nuevoIf.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Sentencia_Booleana ::= Op_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_Booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Sentencia_Booleana ::= IDENTIFICADOR Op_RELACIONAL Op_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_Booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Sentencia_Booleana ::= IDENTIFICADOR Op_RELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_Booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Sentencia_Booleana ::= IDENTIFICADOR Op_RELACIONAL IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_Booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Sentencia_Booleana ::= IDENTIFICADOR Op_RELACIONAL IDENTIFICADOR Op_LOGICO Sentencia_Booleana 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_Booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Sentencia_Booleana ::= IDENTIFICADOR Op_RELACIONAL COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_Booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Sentencia_Booleana ::= IDENTIFICADOR Op_RELACIONAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_Booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // If_Else ::= IF PARENTESIS_A Sentencia_Booleana PARENTESIS_C LLAVE_A Sentencia LLAVE_C ELSE LLAVE_A Sentencia LLAVE_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object pA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object pC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llA2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llA2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llC2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llC2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIfElse nuevoIfElse = new SentenciaIfElse(i.toString(),pA.toString(), sen.toString(), pC.toString(), llA.toString(), s.toString(), llC.toString(), el.toString(),llA2.toString(), se.toString(), llC2.toString());
   addIfElseList(nuevoIfElse);
System.out.println("frase: " + nuevoIfElse.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("If_Else",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // While ::= WHILE PARENTESIS_A Sentencia_Booleana PARENTESIS_C LLAVE_A Sentencia LLAVE_C 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaWhile nuevoWhile = new SentenciaWhile(w.toString(),pA.toString(), sen.toString(), pC.toString(), llA.toString(), se.toString(), llC.toString());
   addWhileList(nuevoWhile);
System.out.println("frase: " + nuevoWhile.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // While ::= WHILE PARENTESIS_A Sentencia_Booleana PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Do_While ::= DO LLAVE_A Sentencia LLAVE_C WHILE PARENTESIS_A Sentencia_Booleana PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntoCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntoCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object puntoC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaDoWhile nuevoDoWhile = new SentenciaDoWhile(d.toString(),llA.toString(), sen.toString(), llC.toString(), w.toString(), pA.toString(), s.toString(), pC.toString(), puntoC.toString());
   addDoWhileList(nuevoDoWhile);
System.out.println("frase: " + nuevoDoWhile.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Do_While",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // For ::= FOR PARENTESIS_A Sentencia_For PARENTESIS_C LLAVE_A Sentencia LLAVE_C 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaFor nuevoFor = new SentenciaFor(f.toString(),pA.toString(), sen.toString(), pC.toString(), llA.toString(), s.toString(), llC.toString());
   addForList(nuevoFor);
System.out.println("frase: " + nuevoFor.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("For",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // For ::= FOR PARENTESIS_A Sentencia_For PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("For",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Sentencia_For ::= T_DATO IDENTIFICADOR IGUAL NUMERO P_COMA Sentencia_Booleana P_COMA Declaracion_For 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_For",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Sentencia_For ::= CADENA IDENTIFICADOR D_PUNTOS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_For",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Sentencia_For ::= IDENTIFICADOR IGUAL NUMERO P_COMA Sentencia_Booleana P_COMA Declaracion_For 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_For",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Declaracion_For ::= IDENTIFICADOR Op_ATRIBUCION NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_For",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Declaracion_For ::= IDENTIFICADOR Op_INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_For",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Declaracion_For ::= Op_INCREMENTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_For",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Switch ::= SWITCH PARENTESIS_A IDENTIFICADOR PARENTESIS_C LLAVE_A Sentencia_Switch LLAVE_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaSwitch nuevoSwitch = new SentenciaSwitch(s.toString(),pA.toString(), id.toString(), pC.toString(), llA.toString(), sen.toString(), llC.toString());
   addSwitchList(nuevoSwitch);
System.out.println("frase: " + nuevoSwitch.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Switch",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Sentencia_Switch ::= CASE IDENTIFICADOR D_PUNTOS Sn_SALIDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_Switch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Sentencia_Switch ::= CASE IDENTIFICADOR D_PUNTOS Sn_SALIDA Sentencia_Switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_Switch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // metodos ::= IDENTIFICADOR PARENTESIS_A PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // metodos ::= IDENTIFICADOR PARENTESIS_A Operacion PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Operacion ::= COMILLAS Datos COMILLAS Op_MATEMATICO Operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Operacion ::= COMILLAS Datos COMILLAS Operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Operacion ::= COMILLAS Datos COMILLAS MULTIPLICACION Operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Operacion ::= PARENTESIS_A NUMERO Op_MATEMATICO NUMERO PARENTESIS_C Operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Operacion ::= PARENTESIS_A Operacion PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Tipo_valor ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_valor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Tipo_valor ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_valor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Tipo_valor ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_valor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Tipo_valor ::= FINAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_valor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Datos ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Datos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Datos ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Datos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Datos ::= Op_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Datos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Datos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Datos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
